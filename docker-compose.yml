---

networks:
 default:
   name: elastic
   external: false

services:
 setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - ./certs:/usr/share/elasticsearch/config/certs
     - .:/data_dirs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
         exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
         exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
         echo "Creating CA";
         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
         unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
         echo "Creating certs";
         echo -ne \
         "instances:\n"\
         "  - name: es01\n"\
         "    dns:\n"\
         "      - es01\n"\
         "      - localhost\n"\
         "  - name: es02\n"\
         "    dns:\n"\
         "      - es02\n"\
         "      - localhost\n"\
         "  - name: es03\n"\
         "    dns:\n"\
         "      - es03\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         "  - name: kibana\n"\
         "    dns:\n"\
         "      - kibana\n"\
         "      - localhost\n"\
         "    ip:\n"\
         "      - 127.0.0.1\n"\
         > config/certs/instances.yml;
         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
         unzip config/certs/certs.zip -d config/certs;
       fi;
       #echo "Setting file permissions"
       #chown -R 1000:0 config/certs;
       #find . -type d -exec chmod 750 \{\} \;;
       #find . -type f -exec chmod 640 \{\} \;;
       for dir in `echo ${CERTS} ${ES_DATA01} ${ES_DATA02} ${ES_DATA03} ${KIBANA} ${METRICBEAT01}`
       do
       echo "mkdir and chmod to 1000:0 for /data_dirs/${dir}"
       mkdir -p /data_dirs/${dir}
       chown -R 1000:0 /data_dirs/${dir}
       done

       echo "Waiting for Elasticsearch availability";
       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       until curl -s --cacert config/certs/ca/ca.crt https://es02:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       until curl -s --cacert config/certs/ca/ca.crt https://es03:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
       echo "Setting kibana_system password";
       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
       echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

 es01:
   depends_on:
     setup:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - ./${CERTS}:/usr/share/elasticsearch/config/certs
     - ./${ES_DATA01}:/usr/share/elasticsearch/data
   ports:
     - 9200:9200
   environment:
     node.name: es01
     cluster.name: cls0
     discovery.seed_hosts: "es01,es02,es03"
     cluster.initial_master_nodes: "es01,es02,es03"
     discovery.type: "multi-node"
     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
     bootstrap.memory_lock: true
     xpack.security.enabled: true
     xpack.security.http.ssl.enabled: true
     xpack.security.http.ssl.key: certs/es01/es01.key
     xpack.security.http.ssl.certificate: certs/es01/es01.crt
     xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.enabled: true
     xpack.security.transport.ssl.key: certs/es01/es01.key
     xpack.security.transport.ssl.certificate: certs/es01/es01.crt
     xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.verification_mode: certificate
     xpack.license.self_generated.type: ${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 es02:
   depends_on:
     setup:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - ./certs:/usr/share/elasticsearch/config/certs:ro
     - ./${ES_DATA02}:/usr/share/elasticsearch/data
   ports:
     - 9201:9200
   environment:
     node.name: es02
     cluster.name: cls0
     discovery.seed_hosts: "es01,es02,es03"
     cluster.initial_master_nodes: "es01,es02,es03"
     discovery.type: multi-node
     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
     bootstrap.memory_lock: true
     xpack.security.enabled: true
     xpack.security.http.ssl.enabled: true
     xpack.security.http.ssl.key: certs/es02/es02.key
     xpack.security.http.ssl.certificate: certs/es02/es02.crt
     xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.enabled: true
     xpack.security.transport.ssl.key: certs/es02/es02.key
     xpack.security.transport.ssl.certificate: certs/es02/es02.crt
     xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.verification_mode: certificate
     xpack.license.self_generated.type: ${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

 es03:
   depends_on:
     setup:
       condition: service_healthy
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - ./${CERTS}:/usr/share/elasticsearch/config/certs:ro
     - ./${ES_DATA02}:/usr/share/elasticsearch/data
   ports:
     - 9203:9200
   environment:
     node.name: es03
     cluster.name: cls0
     discovery.seed_hosts: "es01,es02,es03"
     cluster.initial_master_nodes: "es01,es02,es03"
     discovery.type: multi-node
     ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
     bootstrap.memory_lock: true
     xpack.security.enabled: true
     xpack.security.http.ssl.enabled: true
     xpack.security.http.ssl.key: certs/es03/es03.key
     xpack.security.http.ssl.certificate: certs/es03/es03.crt
     xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.enabled: true
     xpack.security.transport.ssl.key: certs/es03/es03.key
     xpack.security.transport.ssl.certificate: certs/es03/es03.crt
     xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
     xpack.security.transport.ssl.verification_mode: certificate
     xpack.license.self_generated.type: ${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120




 kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - ./${CERTS}:/usr/share/kibana/config/certs:ro
      - ./${KIBANA}:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

 metricbeat01:
   depends_on:
     es01:
       condition: service_healthy
     kibana:
       condition: service_healthy
   image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
   user: root
   volumes:
     - ./${CERTS}:/usr/share/metricbeat/certs
     - ./${METRICBEAT01}:/usr/share/metricbeat/data
     - "./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
     - "/var/run/docker.sock:/var/run/docker.sock:ro"
     - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
     - "/proc:/hostfs/proc:ro"
     - "/:/hostfs:ro"
   environment:
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
     - KIBANA_HOSTS=http://kibana:5601
     - LOGSTASH_HOSTS=http://logstash01:9600
